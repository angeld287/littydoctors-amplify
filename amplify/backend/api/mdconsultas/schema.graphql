type ConsultingRoom 
    @model 
    @auth(rules: [
        # Defaults to use the "owner" field.
        { allow: owner },

        # Admin users can access any operation.
        { allow: groups, groups: ["admin"] },
        { allow: groups, groups: ["secretary"], operations: [read] },
        { allow: groups, groups: ["client"], operations: [read] }
    ]) {
    id: ID!
    modules: [Module] @connection
    doctor: Doctor @connection
    stripe: Stripe @connection
    secretary: String!
    location: Location @connection
}

type Location 
    @model 
    @auth(rules: [
        { allow: owner },
        { allow: groups, groups: ["doctor"], operations: [read] }
        { allow: groups, groups: ["secretary"], operations: [read] }
        { allow: groups, groups: ["client"], operations: [read] }
    
    ]){
    id: ID!
    name: String!
}

type Stripe @model @auth(rules: [{allow: owner}]){
    id: ID!
    source_token: String!
    plan_id: String!
    plan_name: String!
    customer_id: String!
    subscription_id: String!
}

type Doctor 
    @model 
    @auth(rules: [
        # Defaults to use the "owner" field.
        { allow: owner },

        # Admin users can access any operation.
        { allow: groups, groups: ["admin"] },

        { allow: groups, groups: ["client"], operations: [read] }
        { allow: groups, groups: ["secretary"], operations: [read] }
    ]) {
    id: ID!
    name: String!
    username: String!
    email: String!
    speciality: String!
    sex: String!
    consultingroom: ConsultingRoom @connection
    image: String!
}

type Rejection 
    @model 
    @auth(rules: [
        # Defaults to use the "owner" field. 
        { allow: owner },
        
        { allow: groups, groups: ["admin"] },

        { allow: owner, ownerField: "doctor", operations: [read] },
        { allow: owner, ownerField: "secretary", operations: [read] },
        { allow: owner, ownerField: "patient", operations: [read] },
    ]) {
    id: ID!
    description: String
    doctor: String
    secretary: String
    patient: String
    createdAt: String!
}

type Cancelation 
    @model 
    @auth(rules: [
        # Defaults to use the "owner" field.
        { allow: owner },
        
        { allow: groups, groups: ["admin"] },

        { allow: owner, ownerField: "doctor", operations: [read] },
        { allow: owner, ownerField: "secretary", operations: [read] },
        { allow: owner, ownerField: "patient", operations: [read] },
    ]) {
    id: ID!
    description: String
}

type Notification 
    @model 
    @auth(rules: [
        # Defaults to use the "owner" field.
        { allow: owner },
        
        { allow: groups, groups: ["admin"] },

        { allow: owner, ownerField: "doctor", operations: [read] },
        { allow: owner, ownerField: "secretary", operations: [read] },
        { allow: owner, ownerField: "patient", operations: [read] },
    ]) {
    id: ID!
    state: String
    doctor: String
    secretary: String
    patient: String
    createdAt: String!
}

type Confirmation 
    @model 
    @auth(rules: [
        # Defaults to use the "owner" field.
        { allow: owner },
        
        { allow: groups, groups: ["admin"] },

        { allow: owner, ownerField: "doctor", operations: [read] },
        { allow: owner, ownerField: "secretary", operations: [read] },
        { allow: owner, ownerField: "patient", operations: [read] },
    ]) {
    id: ID!
}

type Module
    @model 
    @auth(rules: [
        # Defaults to use the "owner" field.
        { allow: owner },
        { allow: groups, groups: ["doctor"], operations: [read] },
        { allow: groups, groups: ["client"], operations: [read] },
        { allow: groups, groups: ["secretary"], operations: [read] },
    ]) {
    id: ID!
    name: String
    fields: [Field] @connection
    image: String
    description: String
}

type DoctorCustomModuleProps
    @model 
    @auth(rules: [
        # Defaults to use the "owner" field.
        { allow: owner },
        { allow: groups, groups: ["doctor"], operations: [read] },
        { allow: groups, groups: ["client"], operations: [read] },
        { allow: groups, groups: ["secretary"], operations: [read] },
    ]) {
    id: ID!
    active: Boolean
    module: Module @connection
}

type Field
    @model 
    @auth(rules: [
        { allow: groups, groups: ["admin"] },
        { allow: groups, groups: ["client"], operations: [read] },
        { allow: groups, groups: ["secretary"], operations: [read] },
        { allow: groups, groups: ["doctor"], operations: [read] },
    ]) {
    id: ID!
    name: String
    #module: Module @connection
}

type DoctorCustomFieldProps
    @model 
    @auth(rules: [
        # Defaults to use the "owner" field.
        { allow: owner },
        
        { allow: groups, groups: ["client"], operations: [read] },
        { allow: groups, groups: ["secretary"], operations: [read] },
    ]) {
    id: ID!
    name: String
    required: Boolean
    visible: Boolean
    field: Field @connection
}

type MedicalAppointment
    @model(subscriptions: null)
    @auth(rules: [
        # Defaults to use the "owner" field.
        { allow: owner },
        
        # Authorize the update mutation and both queries. Use `queries: null` to disable auth for queries.
        { allow: owner, ownerField: "secretary", operations: [update, read] },
        { allow: owner, ownerField: "doctorname", operations: [update, read] },

        # Admin users can access any operation.
        { allow: groups, groups: ["admin"] }
    ]) {
    id: ID!
    location: Location @connection
    doctor: Doctor @connection
    doctorname: String
    patient: Patient @connection
    rejection: [Rejection] @connection
    cancelation: Cancelation @connection
    notification: [Notification] @connection(sortField: "createdAt")
    confirmation: Confirmation @connection
    secretary: String
    details: String
    date_created: String
    date_of_medical_appointment: String
    state: State
    position: Int
    consult_cost: String
    read_secretary: Boolean
    read_doctor: Boolean
    read_client: Boolean
    createdAt: String
}

type Subscription {
  onCreateMedicalAppointment(doctorname: String, secretary: String): MedicalAppointment @aws_subscribe(mutations: ["createMedicalAppointment"])
  onUpdateMedicalAppointment(read_secretary: Boolean, read_doctor: Boolean, read_client: Boolean, doctorname: String, secretary: String): MedicalAppointment @aws_subscribe(mutations: ["updateMedicalAppointment"])
}

enum State { INSERTED APPROVED CONFIRMED PRESENT IN_PROCESS FINISHED REJECTED CANCELED}

#Medical Consultation Process BackEnd definition

type MedicalHistory
    @model
    @auth(rules: [
        # Defaults to use the "owner" field.
        { allow: owner },

        # Admin users can access any operation.
        { allow: groups, groups: ["admin"] },

        { allow: groups, groups: ["doctor"], operations: [update, read] }
        { allow: groups, groups: ["secretary"], operations: [read] }
    ]) {
    id: ID!
    reason: String
    patient: Patient @connection
    physicalExploration: PhysicalExploration @connection
    postConsultationsActivities: PostConsultationsActivities @connection
}

type Patient 
    @model 
    @auth(rules: [
        # Defaults to use the "owner" field.
        { allow: owner },

        # Admin users can access any operation.
        { allow: groups, groups: ["admin"] },

        { allow: groups, groups: ["doctor"], operations: [update, read] }
        { allow: groups, groups: ["secretary"], operations: [read] }
    ]) {
    id: ID!
    name: String!
    username: String!
    email: String!
    phone: String!
    phone_id: String
    weight: String
    height: String
    size: String
    age: String
    birthdate: String
    patientHistory: PatientHistory @connection
}

type PatientHistory
    @model 
    @auth(rules: [
        # Defaults to use the "owner" field.
        { allow: owner },

        # Admin users can access any operation.
        { allow: groups, groups: ["admin"] },

        { allow: groups, groups: ["doctor"], operations: [update, read] }
        { allow: groups, groups: ["secretary"], operations: [read] }
    ]) {
    id: ID!
    nonPathologicalHistory: NonPathologicalHistory @connection
    pathologicalHistory: PathologicalHistory @connection
    familyHistory: FamilyHistory @connection
    gynecoObstetricHistory: GynecoObstetricHistory @connection
}

type NonPathologicalHistory 
    @model 
    @auth(rules: [
        # Defaults to use the "owner" field.
        { allow: owner },

        # Admin users can access any operation.
        { allow: groups, groups: ["admin"] },

        { allow: groups, groups: ["doctor"], operations: [update, read] }
        { allow: groups, groups: ["secretary"], operations: [read] }
    ]) {
    id: ID!
    alcohol: NonPathologicalActivities @connection
    smoking: NonPathologicalActivities @connection
    drugs: NonPathologicalActivities @connection
    immunizations: NonPathologicalActivities @connection
}


type NonPathologicalActivities 
    @model 
    @auth(rules: [
        # Defaults to use the "owner" field.
        { allow: owner },

        # Admin users can access any operation.
        { allow: groups, groups: ["admin"] },

        { allow: groups, groups: ["doctor"], operations: [update, read] }
        { allow: groups, groups: ["secretary"], operations: [read] }
    ]) {
    id: ID!
    active: Boolean
    frequency: String
    comment: String
}

type PathologicalHistory
    @model 
    @auth(rules: [
        # Defaults to use the "owner" field.
        { allow: owner },

        # Admin users can access any operation.
        { allow: groups, groups: ["admin"] },

        { allow: groups, groups: ["doctor"], operations: [update, read] }
        { allow: groups, groups: ["secretary"], operations: [read] }
    ]) {
    id: ID!
    surgicalInterventions: [SurgicalIntervention] @connection
    patientMedications: [PatientMedications] @connection(name: "pm")
    patientAllergies: [PatientAllergies] @connection(name: "pa")
}

type FamilyHistory
    @model 
    @auth(rules: [
        # Defaults to use the "owner" field.
        { allow: owner },

        # Admin users can access any operation.
        { allow: groups, groups: ["admin"] },

        { allow: groups, groups: ["doctor"], operations: [update, read] }
        { allow: groups, groups: ["secretary"], operations: [read] }
    ]) {
    id: ID!
}

type FamilyDetails 
    @model 
    @auth(rules: [
        # Defaults to use the "owner" field.
        { allow: owner },

        # Admin users can access any operation.
        { allow: groups, groups: ["admin"] },

        { allow: groups, groups: ["doctor"], operations: [update, read] }
        { allow: groups, groups: ["secretary"], operations: [read] }
    ]) {
    id: ID!
    alive: Boolean
    diseases: Diseases @connection
    comment: String
}

type Diseases
    @model 
    @auth(rules: [
        # Defaults to use the "owner" field.
        { allow: owner },

        # Admin users can access any operation.
        { allow: groups, groups: ["admin"] },

        { allow: groups, groups: ["doctor"], operations: [update, read] }
        { allow: groups, groups: ["secretary"], operations: [read] }
    ]) {
    id: ID!
    name: String
}

type GynecoObstetricHistory
    @model 
    @auth(rules: [
        # Defaults to use the "owner" field.
        { allow: owner },

        # Admin users can access any operation.
        { allow: groups, groups: ["admin"] },

        { allow: groups, groups: ["doctor"], operations: [update, read] }
        { allow: groups, groups: ["secretary"], operations: [read] }
    ]) {
    id: ID!
    menarche: String
    sexual_development: String
    menstrual_rhythm: String
    sex_life: String
    deliveries: String
    abortions: String
    caesarean_sections: String
    contraceptive_method: String
}

type Allergies
    @model
    @auth(rules: [
        # Defaults to use the "owner" field.
        { allow: owner },

        # Admin users can access any operation.
        { allow: groups, groups: ["admin"] },

        { allow: groups, groups: ["doctor"], operations: [update, read] }
        { allow: groups, groups: ["secretary"], operations: [read] }
    ]) {
    id: ID!
    name: String
    patients: [PatientAllergies] @connection(name: "ap")
}

type PatientAllergies @model(queries: null) {
  id: ID!
  pathologicalHistory: PathologicalHistory @connection(name: "pa")
  allergies: Allergies @connection(name: "ap")
}

type PatientMedications @model(queries: null) {
  id: ID!
  pathologicalHistory: PathologicalHistory @connection(name: "pm")
  medications: Medicines @connection(name: "mp")
}

type Medicines
    @model 
    @auth(rules: [
        # Defaults to use the "owner" field.
        { allow: owner },

        # Admin users can access any operation.
        { allow: groups, groups: ["admin"] },

        { allow: groups, groups: ["doctor"], operations: [update, read] }
        { allow: groups, groups: ["secretary"], operations: [read] }
    ]) {
    id: ID!
    name: String
    patients: [PatientMedications] @connection(name: "mp")
    code: String
    drug_concentration: String #500mg, 200mg, 50mg 
    chemical_composition: String
    mp: [MedicalPrescriptionsMedications] @connection(name: "mmp")
}

type PostConsultationsActivities
    @model 
    @auth(rules: [
        # Defaults to use the "owner" field.
        { allow: owner },

        # Admin users can access any operation.
        { allow: groups, groups: ["admin"] },

        { allow: groups, groups: ["doctor"], operations: [update, read] }
        { allow: groups, groups: ["secretary"], operations: [read] }
    ]) {
    id: ID!
    medicalPrescriptions: [PostConsultActMedicalPres] @connection(name: "pcamp")
    medicalAnalysis: [PostConsultActMedAnalysis] @connection(name: "pcama")
    surgicalIntervention: [PostConsultActSurgicalInt] @connection(name: "pcasi")
}

type MedicalPrescriptions
    @model 
    @auth(rules: [
        # Defaults to use the "owner" field.
        { allow: owner },

        # Admin users can access any operation.
        { allow: groups, groups: ["admin"] },

        { allow: groups, groups: ["doctor"], operations: [update, read] }
        { allow: groups, groups: ["secretary"], operations: [read] }
    ]) {
    id: ID!
    date: String
    frequency: String
    duration: String
    medications: [MedicalPrescriptionsMedications] @connection(name: "mpm")
    pca: [PostConsultActMedicalPres] @connection(name: "mppca")
}

type PostConsultActMedicalPres @model(queries: null) {
  id: ID!
  pcActivities: PostConsultationsActivities @connection(name: "pcamp")
  medicalPrescriptions: MedicalPrescriptions @connection(name: "mppca")
}

type MedicalPrescriptionsMedications @model(queries: null) {
  id: ID!
  medicalPrescriptions: MedicalPrescriptions @connection(name: "mpm")
  medications: Medicines @connection(name: "mmp")
}

type PostConsultActMedAnalysis @model(queries: null) {
  id: ID!
  pcActivities: PostConsultationsActivities @connection(name: "pcama")
  medicalAnalysis: MedicalAnalysis @connection(name: "mapca")
}

type MedicalAnalysis
    @model 
    @auth(rules: [
        # Defaults to use the "owner" field.
        { allow: owner },

        # Admin users can access any operation.
        { allow: groups, groups: ["admin"] },

        { allow: groups, groups: ["doctor"], operations: [update, read] }
        { allow: groups, groups: ["secretary"], operations: [read] }
    ]) {
    id: ID!
    name: String
    code: String
    medicalAnalysis: [PostConsultActMedAnalysis] @connection(name: "mapca")
}

type PostConsultActSurgicalInt @model(queries: null) {
  id: ID!
  pcActivities: PostConsultationsActivities @connection(name: "pcasi")
  surgicalIntervention: SurgicalIntervention @connection(name: "sipca")
}

type SurgicalIntervention
    @model
    @auth(rules: [
        # Defaults to use the "owner" field.
        { allow: owner },

        # Admin users can access any operation.
        { allow: groups, groups: ["admin"] },

        { allow: groups, groups: ["doctor"], operations: [update, read] }
        { allow: groups, groups: ["secretary"], operations: [read] }
    ]) {
    id: ID!
    surgicalIntervention: PostConsultActSurgicalInt @connection(name: "sipca")
}

type PhysicalExploration
    @model
    @auth(rules: [
        # Defaults to use the "owner" field.
        { allow: owner },

        # Admin users can access any operation.
        { allow: groups, groups: ["admin"] },

        { allow: groups, groups: ["doctor"], operations: [update, read] }
        { allow: groups, groups: ["secretary"], operations: [read] }
    ]) {
    id: ID!
    general_exploration: String
    vitalsigns: VitalSigns @connection
    regionalExploration: RegionalExploration @connection
}

type VitalSigns
    @model
    @auth(rules: [
        # Defaults to use the "owner" field.
        { allow: owner },

        # Admin users can access any operation.
        { allow: groups, groups: ["admin"] },

        { allow: groups, groups: ["doctor"], operations: [update, read] }
        { allow: groups, groups: ["secretary"], operations: [read] }
    ]) {
    id: ID!
    blood_pressure: String
    Breathing: String
    Pulse: String
    Temperature: String
}

type RegionalExploration
    @model
    @auth(rules: [
        # Defaults to use the "owner" field.
        { allow: owner },

        # Admin users can access any operation.
        { allow: groups, groups: ["admin"] },

        { allow: groups, groups: ["doctor"], operations: [update, read] }
        { allow: groups, groups: ["secretary"], operations: [read] }
    ]) {
    id: ID!
    head: String
    neck: String
    thorax: String
    abdomen: String
    members: String
    genitals: String
    others: String
}