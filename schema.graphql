type ConsultingRoom 
    @model 
    @auth(rules: [
        # Defaults to use the "owner" field.
        { allow: owner },

        # Admin users can access any operation.
        { allow: groups, groups: ["admin"] },
        { allow: groups, groups: ["secretary"], operations: [read] },
        { allow: groups, groups: ["client"], operations: [read] }
    ]) {
    id: ID!
    doctor: Doctor @connection
    stripe: Stripe @connection
    secretary: String
    location: Location @connection
}

type Location 
    @model 
    @auth(rules: [
        { allow: owner },
        { allow: groups, groups: ["company"], operations: [read] }
        { allow: groups, groups: ["secretary"], operations: [read] }
        { allow: groups, groups: ["client"], operations: [read] }
    
    ]){
    id: ID!
    name: String!
}

type Stripe @model @auth(rules: [{allow: owner}]){
    id: ID!
    source_token: String
    plan_id: String
    plan_name: String
    customer_id: String
    subscription_id: String
}

type Doctor 
    @model 
    @auth(rules: [
        # Defaults to use the "owner" field.
        { allow: owner },

        # Admin users can access any operation.
        { allow: groups, groups: ["admin"] },

        { allow: groups, groups: ["client"], operations: [read] }
        { allow: groups, groups: ["secretary"], operations: [read] }
    ]) {
    id: ID!
    name: String
    username: String
    email: String
    speciality: String
    sex: String
    consultingroom: ConsultingRoom @connection
    image: String
}

type Patient 
    @model 
    @auth(rules: [
        # Defaults to use the "owner" field.
        { allow: owner },

        # Admin users can access any operation.
        { allow: groups, groups: ["admin"] },

        { allow: groups, groups: ["company"], operations: [read] }
        { allow: groups, groups: ["secretary"], operations: [read] }
    ]) {
    id: ID!
    name: String
    username: String
    email: String
    phone: String
    phone_id: String
    weight: String
    height: String
    size: String
    age: String
    birthdate: String
}

type Rejection 
    @model 
    @auth(rules: [
        # Defaults to use the "owner" field. 
        { allow: owner },
        
        { allow: groups, groups: ["admin"] },

        { allow: owner, ownerField: "doctor", operations: [read] },
        { allow: owner, ownerField: "secretary", operations: [read] },
        { allow: owner, ownerField: "patient", operations: [read] },
    ]) {
    id: ID!
    description: String
    doctor: String
    secretary: String
    patient: String
    createdAt: String!
}

type Cancelation 
    @model 
    @auth(rules: [
        # Defaults to use the "owner" field.
        { allow: owner },
        
        { allow: groups, groups: ["admin"] },

        { allow: owner, ownerField: "doctor", operations: [read] },
        { allow: owner, ownerField: "secretary", operations: [read] },
        { allow: owner, ownerField: "patient", operations: [read] },
    ]) {
    id: ID!
    description: String
}

type Notification 
    @model 
    @auth(rules: [
        # Defaults to use the "owner" field.
        { allow: owner },
        
        { allow: groups, groups: ["admin"] },

        { allow: owner, ownerField: "doctor", operations: [read] },
        { allow: owner, ownerField: "secretary", operations: [read] },
        { allow: owner, ownerField: "patient", operations: [read] },
    ]) {
    id: ID!
    state: String
    doctor: String
    secretary: String
    patient: String
    createdAt: String!
}

type Confirmation 
    @model 
    @auth(rules: [
        # Defaults to use the "owner" field.
        { allow: owner },
        
        { allow: groups, groups: ["admin"] },

        { allow: owner, ownerField: "doctor", operations: [read] },
        { allow: owner, ownerField: "secretary", operations: [read] },
        { allow: owner, ownerField: "patient", operations: [read] },
    ]) {
    id: ID!
}

type MedicalAppointments 
    @model(subscriptions: null)
    @auth(rules: [
        # Defaults to use the "owner" field.
        { allow: owner },
        
        # Authorize the update mutation and both queries. Use `queries: null` to disable auth for queries.
        { allow: owner, ownerField: "secretary", operations: [update, read] },
        { allow: owner, ownerField: "doctorname", operations: [update, read] },

        # Admin users can access any operation.
        { allow: groups, groups: ["admin"] }
    ]) {
    id: ID!
    location: Location @connection
    doctor: Doctor @connection
    doctorname: String
    patient: Patient @connection
    rejection: [Rejection] @connection
    cancelation: Cancelation @connection
    notification: [Notification] @connection(sortField: "createdAt")
    confirmation: Confirmation @connection
    secretary: String
    details: String
    date_created: String
    date_of_medical_appointment: String
    state: State
    position: Int
    consult_cost: String
    read_secretary: Boolean
    read_company: Boolean
    read_client: Boolean
    createdAt: String!
}

type Subscription {
  onCreateMedicalAppointments(doctorname: String, secretary: String): MedicalAppointments @aws_subscribe(mutations: ["createMedicalAppointments"])
  onUpdateMedicalAppointments(read_secretary: Boolean, read_company: Boolean, read_client: Boolean, doctorname: String, secretary: String): MedicalAppointments @aws_subscribe(mutations: ["updateMedicalAppointments"])
}

enum State { INSERTED APPROVED CONFIRMED PRESENT IN_PROCESS FINISHED REJECTED CANCELED}